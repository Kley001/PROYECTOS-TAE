ggplot(df, aes(x, y, fill = dist)) +
geom_voronoi(outline = cola,
color = 1, size = 0.1) +
scale_fill_gradient(low = "#B9DDF1",  #"#B9DDF1"
high = "#2A5783",  #2A5783
guide = "none") +
theme_void() +
coord_polar()
seq(-15, 15, by = 0.05) %>%
expand.grid(x=., y=.) %>%
ggplot(aes(x=(2*x), y=(sinh(x+y)+2.8*x))) +
geom_point(alpha=.1,
shape=20,
color="aquamarine4",
size=1)+theme_void()+
coord_polar()
#librerias requeridas.
require(tidyverse)
require(ggplot2)
require(MASS)
require(ggvoronoi)
set.seed(12345) #Fijar una semilla.
X_0 <- sample(1:10000, size = 1000) #Muestra de tamaño mil.
y_0 <- sample(1:10000, size = 1000) #Muestra de tamaño mil.
Data <- data.frame(x = X_0, y = y_0) #Data que almacena a 'x' y 'y'.
X_1 <- mvrnorm(n = 150, mu = c(0,0,0), Sigma = diag(3)) #Especificacion de Dist Normal Multivariada.
y_1 <- mvrnorm(n = 150, mu=5, Sigma= 2, tol = 1e-06, empirical = FALSE) #Otra especificacion de Dist Normal Multivariada.
MVN <- data.frame(x = 100 * X_1, y = 100 * y_1, grupo = rep(1, 3000)) #Data asociada a las especificaciones anteriores y generando 1 replica cada 3000 veces.
#Se procede a graficar:
ggplot(Data, aes(x=X_0, y=y_0,)) +
geom_voronoi(outline = MVN,
color = 5, size = 0.1) +
theme_void() +
coord_polar() #Generando grafico apoyado de una distribucion de probabilidad normal multivariada.
#Paquete requerido
require(Bessel)
set.seed(1234567890) #Se fija una semilla
x_m <- sample(1:5000, size = 2000)#Muestra de tamaño dos mil
y_m <- sample(1:5000, size = 2000)#Muestra de tamaño dos mil
Data_m <- data.frame(x_m, y_m)
x_lnorm <- sort(round(rlnorm(1000), 2)) #Dist log normal multivariada.
y_Bessel <- cbind(x_lnorm, a = besselI(x_lnorm, 3), b = BesselI(x_lnorm, 3)) #Funciones de Bessel.
#Paquete requerido
require(Bessel)
set.seed(1234567890) #Se fija una semilla
x_m <- sample(1:5000, size = 2000)#Muestra de tamaño dos mil
y_m <- sample(1:5000, size = 2000)#Muestra de tamaño dos mil
Data_m <- data.frame(x_m, y_m)
x_lnorm <- sort(round(rlnorm(1000), 2)) #Dist log normal multivariada.
y_Bessel <- cbind(x_lnorm, a = besselI(x_lnorm, 3), b = BesselI(x_lnorm, 3)) #Funciones de Bessel.
x_y <- x_lnorm + y_Bessel#Se almacena lo realizado en el paso anterior en esta nueva variable
#Se procede a graficar con apoyo de ggplot2:
ggplot(Data_m, aes(x=x_m, y=y_m)) +
geom_voronoi(outline = x_y,
color ="#CD0BBC", size = 0.005)+
geom_point(size=0.5,stroke=1, shape=21,color="#CD0BBC")+
theme_void() + coord_fixed()#Generando grafico apoyado de una distribucion log normal multivariada y  de las Funciones de Bessel.
#Generando datos para graficar.
set.seed(11522)
#library(RColorBrewer)
ngroup=50
names=paste("G_",seq(1,ngroup),sep="")
DAT=data.frame()
for(i in seq(1:30)){
data=data.frame( matrix(0, ngroup , 3))
data[,1]=i
data[,2]=sample(names, nrow(data))
data[,3]=prop.table(sample( c(rep(0,100),c(1:ngroup)) ,nrow(data)))
DAT=rbind(DAT,data)
}
colnames(DAT)=c("Year","Group","Value")
DAT=DAT[order( DAT$Year, DAT$Group) , ]
coul = brewer.pal(12, "Paired")
seq(-15, 15, by = 0.05) %>%
expand.grid(x=., y=.) %>%
ggplot(aes(x=(2*x), y=(sinh(x+y)+2.8*x))) +
geom_point(alpha=.1,
shape=20,
color="aquamarine4",
size=1)+theme_void()+
coord_polar()
knitr::opts_chunk$set(echo = TRUE)
#cargas librerías necesarias
#install.packages("ggvoronoi")
library(ggplot2)
library(ggvoronoi)
library(dplyr)
#library(ggplot2)
#library(ggvoronoi)
# Generando datos para gráficar
set.seed(1)
x <- sample(1:500, size = 500)
y <- sample(1:500, size = 500)
dist <- sqrt((x - 300) ^ 2 + (y - 300) ^ 2)
df <- data.frame(x, y, dist = dist)
head(df, n=5)
seq(-15, 15, by = 0.05) %>%
expand.grid(x=., y=.) %>%
ggplot(aes(x=(2*x), y=(sinh(x+y)+2.8*x))) +
geom_point(alpha=.1,
shape=20,
color="aquamarine4",
size=1)+theme_void()+
coord_polar()
#librerias requeridas.
require(tidyverse)
require(ggplot2)
require(MASS)
require(ggvoronoi)
set.seed(12345) #Fijar una semilla.
X_0 <- sample(1:10000, size = 1000) #Muestra de tamaño mil.
y_0 <- sample(1:10000, size = 1000) #Muestra de tamaño mil.
Data <- data.frame(x = X_0, y = y_0) #Data que almacena a 'x' y 'y'.
X_1 <- mvrnorm(n = 150, mu = c(0,0,0), Sigma = diag(3)) #Especificacion de Dist Normal Multivariada.
y_1 <- mvrnorm(n = 150, mu=5, Sigma= 2, tol = 1e-06, empirical = FALSE) #Otra especificacion de Dist Normal Multivariada.
MVN <- data.frame(x = 100 * X_1, y = 100 * y_1, grupo = rep(1, 3000)) #Data asociada a las especificaciones anteriores y generando 1 replica cada 3000 veces.
#Se procede a graficar:
ggplot(Data, aes(x=X_0, y=y_0,)) +
geom_voronoi(outline = MVN,
color = 5, size = 0.1) +
theme_void() +
coord_polar() #Generando grafico apoyado de una distribucion de probabilidad normal multivariada.
#Paquete requerido
require(Bessel)
set.seed(1234567890) #Se fija una semilla
x_m <- sample(1:5000, size = 2000)#Muestra de tamaño dos mil
y_m <- sample(1:5000, size = 2000)#Muestra de tamaño dos mil
Data_m <- data.frame(x_m, y_m)
x_lnorm <- sort(round(rlnorm(1000), 2)) #Dist log normal multivariada.
y_Bessel <- cbind(x_lnorm, a = besselI(x_lnorm, 3), b = BesselI(x_lnorm, 3)) #Funciones de Bessel.
x_y <- x_lnorm + y_Bessel#Se almacena lo realizado en el paso anterior en esta nueva variable
#Se procede a graficar con apoyo de ggplot2:
ggplot(Data_m, aes(x=x_m, y=y_m)) +
geom_voronoi(outline = x_y,
color ="#CD0BBC", size = 0.005)+
geom_point(size=0.5,stroke=1, shape=21,color="#CD0BBC")+
theme_void() + coord_fixed()#Generando grafico apoyado de una distribucion log normal multivariada y  de las Funciones de Bessel.
#Generando datos para graficar.
set.seed(11522)
library(RColorBrewer)
ngroup=50
names=paste("G_",seq(1,ngroup),sep="")
DAT=data.frame()
for(i in seq(1:30)){
data=data.frame( matrix(0, ngroup , 3))
data[,1]=i
data[,2]=sample(names, nrow(data))
data[,3]=prop.table(sample( c(rep(0,100),c(1:ngroup)) ,nrow(data)))
DAT=rbind(DAT,data)
}
colnames(DAT)=c("Year","Group","Value")
DAT=DAT[order( DAT$Year, DAT$Group) , ]
coul = brewer.pal(12, "Paired")
coul = colorRampPalette(coul)(ngroup)
coul=coul[sample(c(1:length(coul)) , size=length(coul) ) ]
#Grafica
ggplot(DAT, aes(x=Year, y=Value, fill=Group )) +
geom_area(alpha=1  )+
theme_bw() +
#scale_fill_brewer(colour="red", breaks=rev(levels(DAT$Group)))+
scale_fill_manual(values = coul)+
theme(
text = element_blank(),
line = element_blank(),
title = element_blank(),
legend.position="none",
panel.border = element_blank(),
panel.background = element_blank())
#Paquete requeridos
install.packages("scico")
install.packages("TSP")
devtools::install_github("djnavarro/jasmines")
install.packages(c("polyclip", "goftest", "tensor", "spatstat.sparse", "spatstat.utils", "spatstat.core", "spatstat.geom", "spatstat.data", "spatstat.linnet", "tweenr", "magick", "XML", "patchwork", "spatstat", "gganimate", "animation", "grImport", "ambient"))
library(ggplot2)
library(dplyr)
library(scico)
library(TSP)
library(tidyverse)
library(jasmines)
use_seed(11522) %>%
scene_discs(
rings = 20,
points = rgamma(3, 1,1)*1000,
size = 5
) %>%
mutate(ind = 1:n()) %>%
unfold_warp(
iterations = 2,
scale = 0.5,
output = "layer"
) %>%
unfold_tempest(
iterations = 20,
scale = 0.01
) %>%
style_ribbon(
palette = palette_named("plasma"),
colour = "ind",
alpha = c(0.1, 0.1),
background = "#FBE5E240"
)
knitr::opts_chunk$set(echo = TRUE)
ggplot(Data, aes(x=X_0, y=y_0,)) +
geom_voronoi(outline = MVN,
color = 5, size = 0.1) +
theme_void() +
coord_polar() #Generando grafico apoyado de una distribucion de probabilidad normal multivariada.
#Se procede a graficar:
png("prueba.png")
ggplot(Data, aes(x=X_0, y=y_0,)) +
geom_voronoi(outline = MVN,
color = 5, size = 0.1) +
theme_void() +
coord_polar() #Generando grafico apoyado de una distribucion de probabilidad normal multivariada.
dev.off()
png("prueba.png")
ggplot(Data, aes(x=X_0, y=y_0,)) +
geom_voronoi(outline = MVN,
color = 5, size = 0.1) +
theme_void() +
coord_polar() #Generando grafico apoyado de una distribucion de probabilidad normal multivariada.
dev.off()
devtools::install_github("cutterkom/generativeart")
knitr::opts_chunk$set(echo = TRUE)
#cargas librerías necesarias
#install.packages("ggvoronoi")
library(ggplot2)
library(ggvoronoi)
library(dplyr)
#library(ggplot2)
#library(ggvoronoi)
# Generando datos para gráficar
set.seed(1)
x <- sample(1:500, size = 500)
y <- sample(1:500, size = 500)
dist <- sqrt((x - 300) ^ 2 + (y - 300) ^ 2)
df <- data.frame(x, y, dist = dist)
head(df, n=5)
# cola
s <- seq(0, 1 * pi, length.out = 3000)
cola <- data.frame(x = 100 * (1 + cosh(s)),
y = 200 * (1 + tanh(s)),
grupo = rep(1, 3000))
png("arte1.png")
ggplot(df, aes(x, y, fill = dist)) +
geom_voronoi(outline = cola,
color = 1, size = 0.1) +
scale_fill_gradient(low = "#B9DDF1",  #"#B9DDF1"
high = "#2A5783",  #2A5783
guide = "none") +
theme_void() +
coord_polar()
dev.off()
png("arte2.png")
seq(-15, 15, by = 0.05) %>%
expand.grid(x=., y=.) %>%
ggplot(aes(x=(2*x), y=(sinh(x+y)+2.8*x))) +
geom_point(alpha=.1,
shape=20,
color="aquamarine4",
size=1)+theme_void()+
coord_polar()
dev.off()
#librerias requeridas.
require(tidyverse)
require(ggplot2)
require(MASS)
require(ggvoronoi)
set.seed(12345) #Fijar una semilla.
X_0 <- sample(1:10000, size = 1000) #Muestra de tamaño mil.
y_0 <- sample(1:10000, size = 1000) #Muestra de tamaño mil.
Data <- data.frame(x = X_0, y = y_0) #Data que almacena a 'x' y 'y'.
X_1 <- mvrnorm(n = 150, mu = c(0,0,0), Sigma = diag(3)) #Especificacion de Dist Normal Multivariada.
y_1 <- mvrnorm(n = 150, mu=5, Sigma= 2, tol = 1e-06, empirical = FALSE) #Otra especificacion de Dist Normal Multivariada.
MVN <- data.frame(x = 100 * X_1, y = 100 * y_1, grupo = rep(1, 3000)) #Data asociada a las especificaciones anteriores y generando 1 replica cada 3000 veces.
#Se procede a graficar:
png("arte3.png")
ggplot(Data, aes(x=X_0, y=y_0,)) +
geom_voronoi(outline = MVN,
color = 5, size = 0.1) +
theme_void() +
coord_polar() #Generando grafico apoyado de una distribucion de probabilidad normal multivariada.
dev.off()
#Paquete requerido
require(Bessel)
set.seed(1234567890) #Se fija una semilla
x_m <- sample(1:5000, size = 2000)#Muestra de tamaño dos mil
y_m <- sample(1:5000, size = 2000)#Muestra de tamaño dos mil
Data_m <- data.frame(x_m, y_m)
x_lnorm <- sort(round(rlnorm(1000), 2)) #Dist log normal multivariada.
y_Bessel <- cbind(x_lnorm, a = besselI(x_lnorm, 3), b = BesselI(x_lnorm, 3)) #Funciones de Bessel.
x_y <- x_lnorm + y_Bessel#Se almacena lo realizado en el paso anterior en esta nueva variable
#Se procede a graficar con apoyo de ggplot2:
png("arte4.png")
ggplot(Data_m, aes(x=x_m, y=y_m)) +
geom_voronoi(outline = x_y,
color ="#CD0BBC", size = 0.005)+
geom_point(size=0.5,stroke=1, shape=21,color="#CD0BBC")+
theme_void() + coord_fixed()#Generando grafico apoyado de una distribucion log normal multivariada y  de las Funciones de Bessel.
dev.off()
#Generando datos para graficar.
set.seed(11522)
library(RColorBrewer)
ngroup=50
names=paste("G_",seq(1,ngroup),sep="")
DAT=data.frame()
for(i in seq(1:30)){
data=data.frame( matrix(0, ngroup , 3))
data[,1]=i
data[,2]=sample(names, nrow(data))
data[,3]=prop.table(sample( c(rep(0,100),c(1:ngroup)) ,nrow(data)))
DAT=rbind(DAT,data)
}
colnames(DAT)=c("Year","Group","Value")
DAT=DAT[order( DAT$Year, DAT$Group) , ]
coul = brewer.pal(12, "Paired")
coul = colorRampPalette(coul)(ngroup)
coul=coul[sample(c(1:length(coul)) , size=length(coul) ) ]
#Grafica
png("arte5.png")
ggplot(DAT, aes(x=Year, y=Value, fill=Group )) +
geom_area(alpha=1  )+
theme_bw() +
#scale_fill_brewer(colour="red", breaks=rev(levels(DAT$Group)))+
scale_fill_manual(values = coul)+
theme(
text = element_blank(),
line = element_blank(),
title = element_blank(),
legend.position="none",
panel.border = element_blank(),
panel.background = element_blank())
dev.off()
#Paquete requeridos
#install.packages("scico")
#install.packages("TSP")
#devtools::install_github("djnavarro/jasmines")
library(ggplot2)
library(dplyr)
library(scico)
library(TSP)
library(tidyverse)
library(jasmines)
png("arte6.png")
use_seed(11522) %>%
scene_discs(
rings = 20,
points = rgamma(3, 1,1)*1000,
size = 5
) %>%
mutate(ind = 1:n()) %>%
unfold_warp(
iterations = 2,
scale = 0.5,
output = "layer"
) %>%
unfold_tempest(
iterations = 20,
scale = 0.01
) %>%
style_ribbon(
palette = palette_named("plasma"),
colour = "ind",
alpha = c(0.1, 0.1),
background = "#FBE5E240"
)
dev.off()
seq(-10, 10, by = 0.1) %>%
expand.grid(x=., y=.) %>%
ggplot(aes(x=(x+3.1*sin(y*y)), y=(y+15.1*sin(x)))) +
geom_point(alpha=.05,
shape=20,
color="red",
size=1)+theme_void()+
coord_polar()
seq(-12, 12, by = 0.1) %>%
expand.grid(x=., y=.) %>%
ggplot(aes(x=(cos(y+x)+1.3*y), y=(sin(x+y)+2.3*x))) +
geom_point(alpha=.05,
shape=20,
color="red",
size=1)+theme_void()+
coord_polar()
knitr::opts_chunk$set(echo = TRUE)
seq(-12, 12, by = 0.1) %>%
expand.grid(x=, y=) %>%
ggplot(aes(x=(cos(y+x)+1.3*y), y=(sin(x+y)+2.3*x))) +
geom_voronoi(alpha=.05,
shape=20,
color="red",
size=1)+theme_void()+
coord_polar()
seq(-12, 12, by = 0.1) %>%
expand.grid(x=x_m, y=y_m) %>%
ggplot(aes(x=(cos(y+x)+1.3*y), y=(sin(x+y)+2.3*x))) +
geom_point(alpha=.05,
shape=20,
color="red",
size=1)+theme_void()+
coord_polar()
expand.grid(x=x_1, y=y_1) %>%
ggplot(aes(x=(cos(y+x)+1.3*y), y=(sin(x+y)+2.3*x))) +
geom_point(alpha=.05,
shape=20,
color="red",
size=1)+theme_void()+
coord_polar()
expand.grid(x=X_1, y=y_1) %>%
ggplot(aes(x=(cos(y+x)+1.3*y), y=(sin(x+y)+2.3*x))) +
geom_point(alpha=.05,
shape=20,
color="red",
size=1)+theme_void()+
coord_polar()
expand.grid(x=X_1, y=y_1) %>%
ggplot(aes(x=(sin(y+x)+y*y), y=(sin(x+y)+2.3*x))) +
geom_point(alpha=.05,
color="black",
size=1)+theme_void()+
coord_polar()
png("arte7.png")
seq(-12, 12, by = 0.1) %>%
expand.grid(x=., y=.) %>%
ggplot(aes(x=(cos(y+x)+1.3*y), y=(sin(x+y)+2.3*x))) +
geom_point(alpha=.05,
shape=20,
color="red",
size=1)+theme_void()+
coord_polar()
dev.off()
png("arte8.png")
expand.grid(x=X_1, y=y_1) %>%
ggplot(aes(x=(cos(y+x)+1.3*y), y=(sin(x+y)+2.3*x))) +
geom_point(alpha=.05,
shape=20,
color="red",
size=1)+theme_void()+
coord_polar()
dev.off()
seq(-15, 15, by = 0.1) %>%
expand.grid(x=., y=.) %>%
ggplot(aes(x=(cos(y+x)+1.3*y), y=(sin(x+y)+2.3*x))) +
geom_point(alpha=.05,
shape=20,
color="red",
size=1)+theme_void()+
coord_polar()
seq(-15, 15, by = 0.1) %>%
expand.grid(x=., y=.) %>%
ggplot(aes(x=(cos(y+x)+3*y), y=(sin(x+y)+1.7*x))) +
geom_point(alpha=.05,
shape=20,
color="red",
size=1)+theme_void()+
coord_polar()
seq(-15, 15, by = 0.1) %>%
expand.grid(x=., y=.) %>%
ggplot(aes(x=(cos(y+x)+3*y), y=(sin(x+y)+1*x))) +
geom_point(alpha=.05,
shape=20,
color="red",
size=1)+theme_void()+
coord_polar()
seq(-15, 15, by = 0.1) %>%
expand.grid(x=., y=.) %>%
ggplot(aes(x=(cos(y+x)+5*y), y=(sin(x+y)+1*x))) +
geom_point(alpha=.05,
shape=20,
color="red",
size=1)+theme_void()+
coord_polar()
seq(-15, 15, by = 0.1) %>%
expand.grid(x=., y=.) %>%
ggplot(aes(x=(cos(y+x)+7*y), y=(sin(x+y)+0.5*x))) +
geom_point(alpha=.05,
shape=20,
color="red",
size=1)+theme_void()+
coord_polar()
seq(-20, 20, by = 0.1) %>%
expand.grid(x=., y=.) %>%
ggplot(aes(x=(cos(y+x)+10*y), y=(sin(x+y)+0.1*x))) +
geom_point(alpha=.05,
shape=20,
color="red",
size=1)+theme_void()+
coord_polar()
expand.grid(x=X_1, y=y_1) %>%
ggplot(aes(x=(cos(y+x)+10*y), y=(sin(x+y)+0.1*x))) +
geom_point(alpha=.05,
shape=20,
color="red",
size=1)+theme_void()+
coord_polar()
png("arte7.png")
#seq(-12, 12, by = 0.1) %>%
#expand.grid(x=., y=.) %>%
#ggplot(aes(x=(cos(y+x)+1.3*y), y=(sin(x+y)+2.3*x))) +
#geom_point(alpha=.05,
#           shape=20,
#color="red",
#size=1)+theme_void()+
#coord_polar()
seq(-20, 20, by = 0.1) %>%
expand.grid(x=., y=.) %>%
ggplot(aes(x=(cos(y+x)+10*y), y=(sin(x+y)+0.1*x))) +
geom_point(alpha=.05,
shape=20,
color="red",
size=1)+theme_void()+
coord_polar()
dev.off()
