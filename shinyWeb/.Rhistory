sprintf("MSE: %f, MAE: %f, R2: %f", lm2_mse, lm2_mae, lm2_r2)
lm2_2019 <- datos_vl02 %>% group_by(FECHA, FESTIVIDAD, DIA_SEMANA) %>%
count(name = "NRO_ACCID")
predicted <- round(predict(lm2, newdata=lm2_2019))
actual <- lm2_2019$NRO_ACCID
lm2_mse <- MSE(predicted, actual) # MSE
lm2_mae <- MAE(predicted, actual) # MAE
lm2_r2 <- R2_Score(predicted, actual) # R2
sprintf("MSE: %f, MAE: %f, R2: %f", lm2_mse, lm2_mae, lm2_r2)
datos_lm3 <- base_final03 %>% group_by(FECHA,FESTIVIDAD, DIA_SEMANA) %>%
count(name = "NRO_ACCID")
lm3 <- glm(NRO_ACCID ~ FESTIVIDAD+DIA_SEMANA, family = "poisson", data = datos_lm3) # Modelo lineal generalizado, con familia poisson
lm3_tr <- base_final03 %>% group_by(FECHA,FESTIVIDAD, DIA_SEMANA) %>%
count(name = "NRO_ACCID")
lm3_tr_1 <- lm3_tr[,-4]
predicted <- round(predict(lm3, newdata=lm3_tr_1, type="response"))
actual <- lm3_tr$NRO_ACCID
lm3_mse <- MSE(predicted, actual) # MSE
lm3_mae <- MAE(predicted, actual) # MAE
lm3_r2 <- R2_Score(predicted, actual)
sprintf("MSE: %f, MAE: %f, R2 Score: %f", lm3_mse, lm3_mae, lm3_r2)
lm3_2018 <- datos_vl %>% group_by(FECHA,FESTIVIDAD, DIA_SEMANA) %>%
count(name = "NRO_ACCID")
predicted <- round(predict(lm3, newdata=lm3_2018, type="response"))
actual <- lm3_2018$NRO_ACCID
lm3_mse <- MSE(predicted, actual) # MSE
lm3_mae <- MAE(predicted, actual) # MAE
lm3_r2 <- R2_Score(predicted, actual)
sprintf("MSE: %f, MAE: %f, R2 Score: %f", lm3_mse, lm3_mae, lm3_r2)
lm3_2019 <- datos_vl02 %>% group_by(FECHA,FESTIVIDAD, DIA_SEMANA) %>%
count(name = "NRO_ACCID")
predicted <- round(predict(lm3, newdata=lm3_2019, type="response"))
actual <- lm3_2019$NRO_ACCID
lm3_mse <- MSE(predicted, actual) # MSE
lm3_mae <- MAE(predicted, actual) # MAE
lm3_r2 <- R2_Score(predicted, actual)
sprintf("MSE: %f, MAE: %f, R2 Score: %f", lm3_mse, lm3_mae, lm3_r2)
datos_lm4 <- base_final03 %>% group_by(FECHA, FESTIVIDAD, DIA_SEMANA,
CLASE) %>% count(name = "NRO_ACCID")
lm4 <- glm(NRO_ACCID ~ FESTIVIDAD+DIA_SEMANA+CLASE, family = "poisson",
data = datos_lm4)
datos_lm4_p <- datos_lm4[,-5]
y_train <- round(predict(lm4, newdata= datos_lm4_p, type="response"))
y_actual <- datos_lm4$NRO_ACCID
lm4_tmse <- MSE(y_train, y_actual)
lm4_tmae <-  MAE(y_train, y_actual)
lm4_r2 <- R2_Score(y_train, y_actual)
sprintf("MSE: %f, MAE: %f, R2 Score: %f",
lm4_tmse, lm4_tmae, lm4_r2)
datos_lm4_v1 <- datos_vl %>% group_by(FECHA, FESTIVIDAD, DIA_SEMANA,
CLASE) %>% count(name = "NRO_ACCID")
datos_lm4_v2 <- datos_lm4_v1[,-5]
y_train <- round(predict(lm4, newdata= datos_lm4_v2, type="response"))
y_actual <- datos_lm4_v1$NRO_ACCID
lm4_tmse <- MSE(y_train, y_actual)
lm4_tmae <-  MAE(y_train, y_actual)
lm4_r2 <- R2_Score(y_train, y_actual)
sprintf("MSE: %f, MAE: %f, R2 Score: %f", lm4_tmse, lm4_tmae, lm4_r2)
datos_lm4_v1 <- datos_vl02 %>% group_by(FECHA, FESTIVIDAD, DIA_SEMANA,
CLASE) %>% count(name = "NRO_ACCID")
datos_lm4_v2 <- datos_lm4_v1[,-5]
y_train <- round(predict(lm4, newdata= datos_lm4_v2, type="response"))
y_actual <- datos_lm4_v1$NRO_ACCID
lm4_tmse <- MSE(y_train, y_actual)
lm4_tmae <-  MAE(y_train, y_actual)
lm4_r2 <- R2_Score(y_train, y_actual)
sprintf("MSE: %f, MAE: %f, R2 Score: %f", lm4_tmse, lm4_tmae, lm4_r2)
datos_lm5 <- base_final03 %>% group_by(FECHA, FESTIVIDAD, DIA_SEMANA,
CLASE, DISENO) %>% count(name = "NRO_ACCID")
lm5 <- glm(NRO_ACCID ~ FESTIVIDAD+DIA_SEMANA+CLASE+DISENO, family = "poisson",
data = datos_lm5)
datos_lm5_p <- datos_lm5[,-6]
y_train <- round(predict(lm5, newdata= datos_lm5_p, type="response"))
y_actual <- datos_lm5$NRO_ACCID
lm5_tmse01 <- MSE(y_train, y_actual)
lm5_tmae <-  MAE(y_train, y_actual)
lm5_r2 <- R2_Score(y_train, y_actual)
sprintf("MSE: %f, MAE: %f, R2 Score: %f",
lm5_tmse01, lm5_tmae, lm5_r2)
datos_lm5_v1 <- datos_vl %>% group_by(FECHA, FESTIVIDAD, DIA_SEMANA,
CLASE, DISENO) %>% count(name = "NRO_ACCID")
datos_lm5_v2 <- datos_lm5_v1[,-6]
y_train <- round(predict(lm5, newdata= datos_lm5_v2, type="response"))
y_actual <- datos_lm5_v1$NRO_ACCID
lm5_tmse02 <- MSE(y_train, y_actual)
lm5_tmae <-  MAE(y_train, y_actual)
lm5_r2 <- R2_Score(y_train, y_actual)
sprintf("MSE: %f, MAE: %f, R2 Score: %f",
lm5_tmse02, lm5_tmae, lm5_r2)
datos_lm5_v1 <- datos_vl02 %>% group_by(FECHA, FESTIVIDAD, DIA_SEMANA,
CLASE, DISENO) %>% count(name = "NRO_ACCID")
datos_lm5_v2 <- datos_lm5_v1[,-6]
y_train <- round(predict(lm5, newdata= datos_lm5_v2, type="response"))
y_actual <- datos_lm5_v1$NRO_ACCID
lm5_tmse02 <- MSE(y_train, y_actual)
lm5_tmae <-  MAE(y_train, y_actual)
lm5_r2 <- R2_Score(y_train, y_actual)
sprintf("MSE: %f, MAE: %f, R2 Score: %f",
lm5_tmse02, lm5_tmae, lm5_r2)
datos_lm6 <- base_final03 %>% group_by(FECHA, FESTIVIDAD, SEMANA,
CLASE) %>% count(name = "NRO_ACCID")
lm6 <- glm(NRO_ACCID ~ FESTIVIDAD+SEMANA+CLASE, family = "poisson",
data = datos_lm6)
datos_lm6_p <- datos_lm6[,-5]
y_train <- round(predict(lm6, newdata= datos_lm6_p, type="response"))
y_actual <- datos_lm6$NRO_ACCID
lm6_tmse <- MSE(y_train, y_actual)
lm6_tmae <-  MAE(y_train, y_actual)
lm6_r2 <- R2_Score(y_train, y_actual)
sprintf("MSE: %f, MAE: %f, R2 Score: %f",
lm6_tmse, lm6_tmae, lm6_r2)
datos_lm6_v1 <- datos_vl %>% group_by(FECHA, FESTIVIDAD, SEMANA,
CLASE) %>% count(name = "NRO_ACCID")
datos_lm6_v2 <- datos_lm6_v1[,-5]
y_train <- round(predict(lm6, newdata= datos_lm6_v2, type="response"))
y_actual <- datos_lm6_v1$NRO_ACCID
lm6_tmse <- MSE(y_train, y_actual)
lm6_tmae <-  MAE(y_train, y_actual)
lm6_r2 <- R2_Score(y_train, y_actual)
sprintf("MSE: %f, MAE: %f, R2 Score: %f", lm6_tmse, lm6_tmae, lm6_r2)
datos_lm6_v1 <- datos_vl02 %>% group_by(FECHA, FESTIVIDAD, SEMANA,
CLASE) %>% count(name = "NRO_ACCID")
datos_lm6_v2 <- datos_lm6_v1[,-5]
y_train <- round(predict(lm6, newdata= datos_lm6_v2, type="response"))
y_actual <- datos_lm6_v1$NRO_ACCID
lm6_tmse <- MSE(y_train, y_actual)
lm6_tmae <-  MAE(y_train, y_actual)
lm6_r2 <- R2_Score(y_train, y_actual)
sprintf("MSE: %f, MAE: %f, R2 Score: %f", lm6_tmse, lm6_tmae, lm6_r2)
datos_lm7 <- base_final03 %>% group_by(FECHA, FESTIVIDAD, MES,
CLASE) %>% count(name = "NRO_ACCID")
lm7 <- glm(NRO_ACCID ~ FESTIVIDAD+MES+CLASE, family = "poisson",
data = datos_lm7)
datos_lm7_p <- datos_lm7[,-5]
y_train <- round(predict(lm7, newdata= datos_lm7_p, type="response"))
y_actual <- datos_lm7$NRO_ACCID
lm7_tmse <- MSE(y_train, y_actual)
lm7_tmae <-  MAE(y_train, y_actual)
lm7_r2 <- R2_Score(y_train, y_actual)
sprintf("MSE: %f, MAE: %f, R2 Score: %f",
lm7_tmse, lm7_tmae, lm7_r2)
datos_lm7_v1 <- datos_vl %>% group_by(FECHA, FESTIVIDAD, MES,
CLASE) %>% count(name = "NRO_ACCID")
datos_lm7_v2 <- datos_lm7_v1[,-5]
y_train <- round(predict(lm7, newdata= datos_lm7_v2, type="response"))
y_actual <- datos_lm7_v1$NRO_ACCID
lm7_tmse <- MSE(y_train, y_actual)
lm7_tmae <-  MAE(y_train, y_actual)
lm7_r2 <- R2_Score(y_train, y_actual)
sprintf("MSE: %f, MAE: %f, R2 Score: %f", lm7_tmse, lm7_tmae, lm7_r2)
datos_lm7_v1 <- datos_vl02 %>% group_by(FECHA, FESTIVIDAD, MES,
CLASE) %>% count(name = "NRO_ACCID")
datos_lm7_v2 <- datos_lm7_v1[,-5]
y_train <- round(predict(lm7, newdata= datos_lm7_v2, type="response"))
y_actual <- datos_lm7_v1$NRO_ACCID
lm7_tmse <- MSE(y_train, y_actual)
lm7_tmae <-  MAE(y_train, y_actual)
lm7_r2 <- R2_Score(y_train, y_actual)
sprintf("MSE: %f, MAE: %f, R2 Score: %f", lm7_tmse, lm7_tmae, lm7_r2)
#Se cre? una funci?n que contuviera la relaci?n entre desviaci?n est?ndar y la ra?z cuadrada de la longitud
sem <- function(x, na.rm = FALSE) {
out <- sd(x, na.rm = na.rm)/sqrt(length(x))
return(out)}
#Se a?ade la base de datos especificada
datos_real_pred <- read_excel("shinyWeb/Base_2020_real_predict.xlsx")
#Se hacen los agrupamientos necesarios y se omite la varible Incendio para que en ambos AÑOs est?n las mismas 'Clases'
datos_real_pred_001 <- datos_real_pred[datos_real_pred$CLASE!="Incendio", ]
datos_real_pred_001$AÑO<-as.integer(datos_real_pred_001$AÑO)
datos_real_pred_01 <- datos_real_pred_001 %>% group_by(AÑO, MES, CLASE, NRO_ACCID) %>%
count() %>% mutate(NRO_ACCID=as.integer(NRO_ACCID))
#Gr?fico Comparativo de AÑOs reales y predictivos del 2020
datos_real_pred_01 %>%
group_by(MES, AÑO) %>%
summarize(Número_de_Accidentes = mean(NRO_ACCID),
se = sem(NRO_ACCID)) %>%
ggplot(aes(x = MES,
y = Número_de_Accidentes,
group = AÑO,
color = AÑO)) +
geom_point() +
geom_errorbar(aes(ymin = Número_de_Accidentes - se,
ymax = Número_de_Accidentes + se)) +
geom_line()
Base_prediccion <- read.csv("shinyWeb/prediccion.csv", sep = ",", encoding = "UTF-8")
Base_prediccion <- Base_prediccion[,-1]
Base_prediccion_2020 <- subset(Base_prediccion, (AÑO != '2021'))
Base_prediccion_2020$FECHA <- as.Date(Base_prediccion_2020$FECHA)
Base_prediccion_2020$CLASE <- as.factor(Base_prediccion_2020$CLASE)
Base_prediccion_2020$DIA_SEMANA <- as.factor(Base_prediccion_2020$DIA_SEMANA)
Base_prediccion_2020$AÑO <- as.integer(Base_prediccion_2020$AÑO)
Base_prediccion_2020$FESTIVIDAD <- as.factor(Base_prediccion_2020$FESTIVIDAD)
prediccion_2020 <- predict(object = lm4, newdata = Base_prediccion_2020,
type = "response")
prediccion_diaria2020 <- Base_prediccion_2020 %>%
mutate(NRO_ACCID = round(prediccion_2020,0))
diario_20_02 <- prediccion_diaria2020 %>%
group_by(FECHA, DIA_SEMANA, CLASE, FESTIVIDAD) %>%
summarise(NRO_TOTAL_ACCID=NRO_ACCID)
head(diario_20_02, 10)
Base_prediccion_2021 <- subset(Base_prediccion, (AÑO != '2020'))
Base_prediccion_2021$FECHA <- as.Date(Base_prediccion_2021$FECHA)
Base_prediccion_2021$CLASE <- as.factor(Base_prediccion_2021$CLASE)
Base_prediccion_2021$DIA_SEMANA <- as.factor(Base_prediccion_2021$DIA_SEMANA)
Base_prediccion_2021$AÑO <- as.integer(Base_prediccion_2021$AÑO)
Base_prediccion_2021$FESTIVIDAD <- as.factor(Base_prediccion_2021$FESTIVIDAD)
prediccion_2021 <- predict(object = lm4, newdata = Base_prediccion_2021,
type = "response")
prediccion_diaria2021 <- Base_prediccion_2021 %>%
mutate(NRO_ACCID = round(prediccion_2021,0))
diario_21_02 <- prediccion_diaria2021 %>%
group_by(FECHA, DIA_SEMANA, CLASE, FESTIVIDAD) %>%
summarise(NRO_TOTAL_ACCID=NRO_ACCID)
head(diario_21_02, 10)
Base_prediccion03 <- Base_prediccion[,-4]
Base_prediccion04 <- Base_prediccion03[,-4]
Base_prediccion_2020 <- subset(Base_prediccion, (AÑO != '2021'))
Base_prediccion_2020 <- subset(Base_prediccion04, (AÑO != '2021'))
Base_prediccion_2020$SEMANA <- as.integer(Base_prediccion_2020$SEMANA)
prediccion_2020_02 <- predict(object = lm6, newdata = Base_prediccion_2020,
type = "response")
prediccion_semanal2020 <- Base_prediccion_2020 %>%
mutate(NRO_ACCID = round(prediccion_2020_02,0))
semanal <- prediccion_semanal2020 %>% group_by(CLASE, SEMANA = week(FECHA), NRO_ACCID, FESTIVIDAD) %>% summarize(total = n())
semanal <- mutate(semanal, NRO_ACCID_TOTAL=NRO_ACCID*total)
semanal_20_02 <- semanal %>%
group_by(SEMANA, CLASE, FESTIVIDAD) %>%
summarise(NRO_TOTAL_ACCID=sum(NRO_ACCID_TOTAL))
head(semanal_20_02, 10)
base_final03 <- subset(base_final02, (AÑO != '2020'))
Base_prediccion_2021 <- subset(Base_prediccion, (AÑO != '2020'))
Base_prediccion_2021$FECHA <- as.Date(Base_prediccion_2021$FECHA)
Base_prediccion_2021$CLASE <- as.factor(Base_prediccion_2021$CLASE)
Base_prediccion_2021$DIA_SEMANA <- as.factor(Base_prediccion_2021$DIA_SEMANA)
Base_prediccion_2021$AÑO <- as.integer(Base_prediccion_2021$AÑO)
Base_prediccion_2021$FESTIVIDAD <- as.factor(Base_prediccion_2021$FESTIVIDAD)
prediccion_2021 <- predict(object = lm4, newdata = Base_prediccion_2021,
type = "response")
prediccion_semanal2021 <- Base_prediccion_2021 %>%
mutate(NRO_ACCID = round(prediccion_2021,0))
#borrando columnas no necesarias
prediccion_semanal2021 <-  prediccion_semanal2021[,c(-1,-2,-4,-5)]
#Se agrup? por semana 2021
semanal_21 <- prediccion_semanal2021 %>% group_by(CLASE, SEMANA, NRO_ACCID, FESTIVIDAD) %>% summarize(total = n())
semanal_21 <- mutate(semanal_21, NRO_ACCID_TOTAL=NRO_ACCID*total)
semanal_21_02 <- semanal_21 %>%
group_by(SEMANA, CLASE, FESTIVIDAD) %>%
summarise(NRO_TOTAL_ACCID=sum(NRO_ACCID_TOTAL))
head(semanal_21_02, 10)
Base_prediccion <- read.csv("shinyWeb/prediccion.csv", sep = ",", encoding = "UTF-8")
Base_prediccion_2020 <- subset(Base_prediccion, (AÑO != '2021'))
Base_prediccion_2020$FECHA <- as.Date(Base_prediccion_2020$FECHA)
Base_prediccion_2020$CLASE <- as.factor(Base_prediccion_2020$CLASE)
Base_prediccion_2020$DIA_SEMANA <- as.factor(Base_prediccion_2020$DIA_SEMANA)
Base_prediccion_2020$AÑO <- as.integer(Base_prediccion_2020$AÑO)
Base_prediccion_2020$FESTIVIDAD <- as.factor(Base_prediccion_2020$FESTIVIDAD)
prediccion_2020 <- predict(object = lm4, newdata = Base_prediccion_2020,
type = "response")
prediccion_mensual2020 <- Base_prediccion_2020 %>%
mutate(NRO_ACCID = round(prediccion_2020,0))
#Se borraron columnas no necesarias
prediccion_mensual2020 <-  prediccion_mensual2020[,c(-1,-2,-3,-5,-7)]
#Agrupamiento por mes 2020
#Se agrup? por mes y si fue en d?a festivo o no
mensual_20 <- prediccion_mensual2020 %>% group_by(CLASE, MES, NRO_ACCID, FESTIVIDAD) %>% summarize(total = n())
mensual_20 <- mutate(mensual_20, NRO_ACCID_TOTAL=NRO_ACCID*total)
mensual_20_02 <- mensual_20 %>%
group_by(MES, CLASE, FESTIVIDAD) %>%
summarise(NRO_TOTAL_ACCID=sum(NRO_ACCID_TOTAL))
head(mensual_20_02, 10)
Base_prediccion_2021 <- subset(Base_prediccion, (AÑO != '2020'))
Base_prediccion_2021$FECHA <- as.Date(Base_prediccion_2021$FECHA)
Base_prediccion_2021$CLASE <- as.factor(Base_prediccion_2021$CLASE)
Base_prediccion_2021$DIA_SEMANA <- as.factor(Base_prediccion_2021$DIA_SEMANA)
Base_prediccion_2021$AÑO <- as.integer(Base_prediccion_2021$AÑO)
Base_prediccion_2021$FESTIVIDAD <- as.factor(Base_prediccion_2021$FESTIVIDAD)
prediccion_2021 <- predict(object = lm4, newdata = Base_prediccion_2021,
type = "response")
prediccion_mensual2021 <- Base_prediccion_2021 %>%
mutate(NRO_ACCID = round(prediccion_2021,0))
#Se borranron columnas no necesarias
prediccion_mensual2021 <-  prediccion_mensual2021[,c(-1,-2,-3,-5,-7)]
#Agrupamiento por mes 2021
#Se agrupó por mes y si fue en día festivo o no
mensual_21 <- prediccion_mensual2021 %>% group_by(CLASE, MES, NRO_ACCID, FESTIVIDAD) %>% summarize(total = n())
mensual_21 <- mutate(mensual_21, NRO_ACCID_TOTAL=NRO_ACCID*total)
mensual_21_02 <- mensual_21 %>%
group_by(MES, CLASE, FESTIVIDAD) %>%
summarise(NRO_TOTAL_ACCID=sum(NRO_ACCID_TOTAL))
head(mensual_21_02, 10)
#lectura de .csv y .shp
catastral <- read.csv("shinyWeb/Limite_Barrio_Vereda_Catastral.csv", encoding="UTF-8")
catastro <- read_sf("shinyWeb/Limite_Barrio_Vereda_Catastral.shp")
barrio_vereda <- read.csv("shinyWeb/Barrio_Vereda_2014.csv", encoding="UTF-8")
#Mapa para todos los barrios, usando 'innerjoin' con el .shp de Limite_Barrio_Vereda_Catastral
Unido <- inner_join(catastral, base_final, by = c("COMUNA" = "NUMCOMUNA"))
nueva_base <- Unido %>% filter(AÑO >= 2014 & AÑO <= 2019) %>%
group_by(CODIGO) %>%
summarise(accidentes = n()) %>%
ungroup()
#Se realiz? la conversi?n de CODIGO a formato num?rico
catastro$CODIGO <- as.numeric(as.character(catastro$CODIGO))
#Se utiliz? 'inner join' para unir dos bases y para luego generar mapa
mapa <- inner_join(catastro, nueva_base, by = c("CODIGO" = "CODIGO"))
mypal <- colorNumeric(palette = c("#000000","#280100","#3D0201","#630201","#890100","#B00100","#DD0100","#F50201",
"#FF5F5E","#FF7A79","#FF9796","#FEB1B0","#FDC9C8", "#FFE5E4"), domain = mapa$accidentes, reverse = T)
# Creaci?n del mapa
leaflet() %>% addPolygons(data = mapa, color = "#0A0A0A", opacity = 0.6, weight = 1, fillColor = ~mypal(mapa$accidentes),
fillOpacity = 0.6, label = ~NOMBRE_BAR,
highlightOptions = highlightOptions(color = "black", weight = 3, bringToFront = T, opacity = 1),
popup = paste("Barrio: ", mapa$NOMBRE_BAR, "<br>", "Accidentes: ", mapa$accidentes, "<br>")) %>%
addProviderTiles(providers$OpenStreetMap) %>%
addLegend(position = "bottomright", pal = mypal, values = mapa$accidentes, title = "Accidentes", opacity = 0.6)
# Cantidad de Accidentes por Comuna
medellin_comuna <- base_final %>% filter(AÑO >= 2014 & AÑO <= 2019) %>%
group_by(COMUNA) %>%
summarize(accidentes = n())
ggplot(data = medellin_comuna, aes(x = reorder(COMUNA,+accidentes), y = accidentes)) +
geom_bar(stat = "identity", position = "dodge", fill = "blue", color = "black", alpha = 0.6) +
geom_text(aes(y = accidentes, label = accidentes),
position = position_dodge(width = 0.7), size = 3.5, vjust = 0.5, hjust = -0.1, col = "black") +
xlab("Comuna") +
ylab("Total de Accidentes") +
ggtitle("Total de Accidentes por Comuna entre los AÑOs 2014 y 2019") +
ylim(c(0,50000)) +
theme_minimal() +
coord_flip()
#Haciendo uso de la librer?a 'geosphere', se cre? una funci?n para calcular las distancias para datos geoespaciales
geo.dist = function(df) {
require(geosphere)
d <- function(i,z){         # z[1:2] contain long, lat
dist <- rep(0,nrow(z))
dist[i:nrow(z)] <- distHaversine(z[i:nrow(z),1:2],z[i,1:2])
return(dist)
}
dm <- do.call(cbind,lapply(1:nrow(df),d,df))
return(as.dist(dm))
}
#Se realiz? la conversi?n de la latitud y longitud al formato num?rico
base_final03$LATITUD <- as.numeric(as.character(base_final03$LATITUD))
base_final03$LONGITUD<- as.numeric(as.character(base_final03$LONGITUD))
#Se cre? un nuevo dataset para el agrupamiento, seg?n longitud, latitud y barrio almacenado en 'df'
df <- data.frame(long = base_final03$LONGITUD, lat = base_final03$LATITUD, barrios = base_final03$BARRIO)
#Se cre? con la funci?n 'geo.dist', una matriz de distancias
df1 <- df[1:1000, ]
d <- geo.dist(df1)
hc <- hclust(d)
plot(hc, main = "Dendograma", col = "#00AFBB")
df1$clust <- cutree(hc, k = 6)
head(df1,10)
s <- shapefile("shinyWeb/Limite_Catastral_de__Comunas_y_Corregimientos.shp")
map.df1 <- (s)
ggplot(map.df1)+
geom_path(aes(x=long, y=lat, group=group))+
geom_point(data=df1, aes(x=long, y=lat, color=factor(clust)), size=4)+
scale_color_discrete("Cluster")+
coord_fixed()
#Numero de accidentes por Barrio
datos_cluster <- base_final03 %>% group_by(BARRIO) %>% count(name = "TOTAL_ACCIDENTES")
#Número de accidentes por barrio, seg?n gravedad almacenado en 'df'
df <- as.matrix(table(base_final03$BARRIO, base_final03$GRAVEDAD))
df <- data.frame(Con_heridos = df[,1], Con_muertos = df[,2], Solo_danos = df[,3])
#Escalamiento y centrado de la base de datos.
scaled_data = as.matrix(scale(df))
head(scaled_data, 10)
kmm = kmeans(scaled_data, 5, nstart = 50, iter.max = 15 )
#Se fij? una semilla y se realiz? el calculo y se grafico el WSS(total within - cluster sum of square) para k = 2 hasta k = 10
set.seed(2021022)
k.max <- 10
datos <- scaled_data
wss <- sapply(2:k.max,
function(k){kmeans(datos, k, nstart = 50, iter.max = 15 )$tot.withinss})
plot(2:k.max, wss,
type = "b", pch = 19, frame = FALSE,
xlab = "Número de Clusters (k)",
ylab = "WSS Total",
main = "M?todo del Codo", col="forestgreen")
#Con k=5, se obtiene between_SS / total_SS =  85.1 %) almacenado en 'km'
km <- kmeans(datos, 5)
nb <- NbClust(scaled_data, diss=NULL, distance = "euclidean",
min.nc=4, max.nc=8, method = "kmeans",
index = "all", alphaBeale = 0.1)
hist(nb$Best.nc[1,], breaks = max(na.omit(nb$Best.nc[1,])), main = "Histograma del K ?ptimo ", xlab = "K", ylab = "Frecuencia", col="darkorchid4")
fviz_nbclust(scaled_data, kmeans, method = c("silhouette"))
fviz_nbclust(scaled_data, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)+
labs(subtitle = "M?todo del Codo")
set.seed(123)
fviz_nbclust(scaled_data, kmeans, nstart = 25,  method = "gap_stat", nboot = 50)+
labs(subtitle = "Gap statistic method")
kmm = kmeans(scaled_data, 4, nstart = 50, iter.max = 15 )
df_clust <- data.frame(Con_heridos = df[,1], Con_muertos = df[,2], Solo_danos = df[,3], kmm$cluster)
head(df_clust, 10)
#Accidentalidad Moderada
dfclust_clust1 <- df_clust[df_clust$kmm.cluster == 1, ]
dfclust_clust1$total <- rowSums(dfclust_clust1[,1:3])
sum(dfclust_clust1$Con_heridos)
sum(dfclust_clust1$Con_muertos)
sum(dfclust_clust1$Solo_danos)
sum(dfclust_clust1$total)
#Accidentalidad Baja
dfclust_clust2 <- df_clust[df_clust$kmm.cluster == 2, ]
dfclust_clust2$total <- rowSums(dfclust_clust2[,1:3])
sum(dfclust_clust2$Con_heridos)
sum(dfclust_clust2$Con_muertos)
sum(dfclust_clust2$Solo_danos)
sum(dfclust_clust2$total)
#Accidentalidad Alta
dfclust_clust3 <- df_clust[df_clust$kmm.cluster == 3, ]
dfclust_clust3$total <- rowSums(dfclust_clust3[,1:3])
sum(dfclust_clust3$Con_heridos)
sum(dfclust_clust3$Con_muertos)
sum(dfclust_clust3$Solo_danos)
sum(dfclust_clust3$total)
#Accidentalidad Media-Alta
dfclust_clust4 <- df_clust[df_clust$kmm.cluster == 4, ]
dfclust_clust4$total <- rowSums(dfclust_clust4[,1:3])
sum(dfclust_clust4$Con_heridos)
sum(dfclust_clust4$Con_muertos)
sum(dfclust_clust4$Solo_danos)
sum(dfclust_clust4$total)
#Se vuelve a utlizar catastro para este mapa
#Se import? el archivo .xlsx basemapa
basemapa <- read_excel("shinyWeb/basemapa.xlsx")
base_mapa <- data_frame(basemapa)
catastro$CODIGO <- as.numeric(as.character(catastro$CODIGO))
base_mapa$Codigo <- as.numeric(as.character(base_mapa$Codigo))
#Se utiliz? 'inner join' de nuevo para unir dos bases y para as? luego generar mapa
mapa02 <- inner_join(catastro, base_mapa, by = c("CODIGO" = "Codigo"))
colorgrupos <- c("#00FF66", "#CCFF00", "#FF0000", "#0066FF")
mapa02$colores <- ifelse(mapa02$kmm.cluster == "1", "#00FF66",
ifelse(mapa02$kmm.cluster == "2", "#CCFF00",
ifelse(mapa02$kmm.cluster == "3", "#FF0000",
ifelse(mapa02$kmm.cluster == "4", "#0066FF",0))))
#Mapa final
leaflet() %>% addPolygons(data = mapa02, opacity = 0.4, color = "#545454",weight = 1, fillColor = mapa02$colores,
fillOpacity = 0.4, label = ~NOMBRE_BAR,
highlightOptions = highlightOptions(color = "#262626", weight = 3, bringToFront = T, opacity = 1),
popup = paste("Barrio: ", mapa02$NOMBRE_BAR, "<br>", "Grupo: ", mapa02$kmm.cluster, "<br>", "Número de Accidentes con heridos: ", mapa02$Con_heridos, "<br>", "Número de Accidentes con muertos: ", mapa02$Con_muertos, "<br>", "Número de Accidentes con solo dAÑOs: ", mapa02$Solo_danos)) %>%
addProviderTiles(providers$OpenStreetMap) %>%
addLegend(position = "bottomright", colors = colorgrupos, labels = c("Grupo 1: Accidentalidad Moderada", "Grupo 2: Accidentalidad Baja", "Grupo 3: Accidentalidad Alta", "Grupo 4: Accidentalidad Media-Alta"))
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
rsconnect::setAccountInfo(name='accidentalidad-medallo',
token='55DC327899C7ABA959857DA1D1C2B5CD',
secret='7MoEovMQNtKzmpNaKQgcmKGYPUOyDYgaZ+s8TKRR')
rsconnect::deployApp('C:/Users/Daniel Toro/Documents/PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
runApp('PROYECTOS-TAE/shinyWeb')
